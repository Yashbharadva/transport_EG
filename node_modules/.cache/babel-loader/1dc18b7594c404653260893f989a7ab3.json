{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic.js');\nvar $construct = GetIntrinsic('%Reflect.construct%', true);\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\ntry {\n  DefinePropertyOrThrow({}, '', {\n    '[[Get]]': function Get() {}\n  });\n} catch (e) {\n  // Accessor properties aren't supported\n  DefinePropertyOrThrow = null;\n}\n\n// https://ecma-international.org/ecma-262/6.0/#sec-isconstructor\n\nif (DefinePropertyOrThrow && $construct) {\n  var isConstructorMarker = {};\n  var badArrayLike = {};\n  DefinePropertyOrThrow(badArrayLike, 'length', {\n    '[[Get]]': function Get() {\n      throw isConstructorMarker;\n    },\n    '[[Enumerable]]': true\n  });\n  module.exports = function IsConstructor(argument) {\n    try {\n      // `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:\n      $construct(argument, badArrayLike);\n    } catch (err) {\n      return err === isConstructorMarker;\n    }\n  };\n} else {\n  module.exports = function IsConstructor(argument) {\n    // unfortunately there's no way to truly check this without try/catch `new argument` in old environments\n    return typeof argument === 'function' && !!argument.prototype;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}