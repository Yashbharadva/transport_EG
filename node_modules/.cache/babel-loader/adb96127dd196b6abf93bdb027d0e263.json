{"ast":null,"code":"'use strict';\n\nvar IsCallable = require('es-abstract/2021/IsCallable');\nvar functionsHaveNames = require('functions-have-names')();\nvar callBound = require('call-bind/callBound');\nvar $functionToString = callBound('Function.prototype.toString');\nvar $stringMatch = callBound('String.prototype.match');\nvar classRegex = /^class /;\nvar isClass = function isClassConstructor(fn) {\n  if (IsCallable(fn)) {\n    return false;\n  }\n  if (typeof fn !== 'function') {\n    return false;\n  }\n  try {\n    var match = $stringMatch($functionToString(fn), classRegex);\n    return !!match;\n  } catch (e) {}\n  return false;\n};\nvar regex = /\\s*function\\s+([^(\\s]*)\\s*/;\nvar functionProto = Function.prototype;\nmodule.exports = function getName() {\n  if (!isClass(this) && !IsCallable(this)) {\n    throw new TypeError('Function.prototype.name sham getter called on non-function');\n  }\n  if (functionsHaveNames) {\n    return this.name;\n  }\n  if (this === functionProto) {\n    return '';\n  }\n  var str = $functionToString(this);\n  var match = $stringMatch(str, regex);\n  var name = match && match[1];\n  return name;\n};","map":null,"metadata":{},"sourceType":"script"}