{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\nvar Call = require('./Call');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar Get = require('./Get');\nvar HasProperty = require('./HasProperty');\nvar IsArray = require('./IsArray');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/11.0/#sec-flattenintoarray\n\n// eslint-disable-next-line max-params\nmodule.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n  var mapperFunction;\n  if (arguments.length > 5) {\n    mapperFunction = arguments[5];\n  }\n  var targetIndex = start;\n  var sourceIndex = 0;\n  while (sourceIndex < sourceLen) {\n    var P = ToString(sourceIndex);\n    var exists = HasProperty(source, P);\n    if (exists === true) {\n      var element = Get(source, P);\n      if (typeof mapperFunction !== 'undefined') {\n        if (arguments.length <= 6) {\n          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n        }\n        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n      }\n      var shouldFlatten = false;\n      if (depth > 0) {\n        shouldFlatten = IsArray(element);\n      }\n      if (shouldFlatten) {\n        var elementLen = LengthOfArrayLike(element);\n        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n      } else {\n        if (targetIndex >= MAX_SAFE_INTEGER) {\n          throw new $TypeError('index too large');\n        }\n        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);\n        targetIndex += 1;\n      }\n    }\n    sourceIndex += 1;\n  }\n  return targetIndex;\n};","map":null,"metadata":{},"sourceType":"script"}