{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = elementTypeValidator;\nvar _propTypes = require(\"prop-types\");\nvar _reactIs = require(\"react-is\");\nvar _and = _interopRequireDefault(require(\"./and\"));\nvar _getComponentName = _interopRequireDefault(require(\"./helpers/getComponentName\"));\nvar _wrapValidator = _interopRequireDefault(require(\"./helpers/wrapValidator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction getTypeName(Type) {\n  if (typeof Type === 'string') {\n    return Type;\n  }\n  var type = (0, _getComponentName[\"default\"])(Type);\n  /* istanbul ignore next */\n  // in environments where functions do not have names\n\n  return type || 'Anonymous Component';\n}\nfunction validateElementType(Type, props, propName, componentName) {\n  var type = props[propName].type;\n  if (type === Type) {\n    return null;\n  }\n  return new TypeError(\"\".concat(componentName, \".\").concat(propName, \" must be a React element of type \").concat(getTypeName(Type)));\n}\nfunction elementTypeValidator(Type) {\n  if (Type === '*') {\n    return (0, _wrapValidator[\"default\"])(_propTypes.element, 'elementType(*)', Type);\n  }\n  if (!(0, _reactIs.isValidElementType)(Type)) {\n    throw new TypeError(\"Type must be a React Component, an HTML element tag name, or \\\"*\\\". Got an \".concat(_typeof(Type)));\n  }\n  function elementType(props, propName, componentName) {\n    if (props[propName] == null) {\n      return null;\n    }\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n    return validateElementType.apply(void 0, [Type, props, propName, componentName].concat(rest));\n  }\n  elementType.isRequired = elementType; // covered by and + element\n\n  var typeName = getTypeName(Type);\n  var validatorName = \"elementType(\".concat(typeName, \")\");\n  return (0, _wrapValidator[\"default\"])((0, _and[\"default\"])([_propTypes.element, elementType], validatorName), validatorName, Type);\n}","map":null,"metadata":{},"sourceType":"script"}