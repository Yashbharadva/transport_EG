{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar isPropertyDescriptor = require('../helpers/isPropertyDescriptor');\nvar DefineOwnProperty = require('../helpers/DefineOwnProperty');\nvar FromPropertyDescriptor = require('./FromPropertyDescriptor');\nvar IsAccessorDescriptor = require('./IsAccessorDescriptor');\nvar IsDataDescriptor = require('./IsDataDescriptor');\nvar IsPropertyKey = require('./IsPropertyKey');\nvar SameValue = require('./SameValue');\nvar ToPropertyDescriptor = require('./ToPropertyDescriptor');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-definepropertyorthrow\n\nmodule.exports = function DefinePropertyOrThrow(O, P, desc) {\n  if (Type(O) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(O) is not Object');\n  }\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');\n  }\n  var Desc = isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, desc) ? desc : ToPropertyDescriptor(desc);\n  if (!isPropertyDescriptor({\n    Type: Type,\n    IsDataDescriptor: IsDataDescriptor,\n    IsAccessorDescriptor: IsAccessorDescriptor\n  }, Desc)) {\n    throw new $TypeError('Assertion failed: Desc is not a valid Property Descriptor');\n  }\n  return DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, Desc);\n};","map":null,"metadata":{},"sourceType":"script"}