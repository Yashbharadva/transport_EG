{"ast":null,"code":"import _toConsumableArray from \"/Volumes/DATA/Yash/Projects/contracting zip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Volumes/DATA/Yash/Projects/contracting zip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/DATA/Yash/Projects/contracting zip/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n/**\n * Sagas file\n * 1.Saga intercepts all the actions before they go to reducer\n * 2.yield method pauses the execution until it is finished\n * 3.yield has several functions\n * i. takeEvery(intercepts the action types i.e listens to that type of action)\n * ii. put(dispatch the action to reducer)\n * iii. call(call some external functions like API calls)\n * iv. select(get the state of any object from the store)\n * 4.Saga methods passes the action object to the saga so we can access the data in action object\n */\n\n/*\n* This is a utility class\n* import this class in our individual sagas and call the function addSagaToRoot and push all our\n* action listeners getRootSagaSaga is called from store file which activates all our listeners\n*/\nimport { all, flush, fork, take } from 'redux-saga/effects';\nimport { channel, buffers } from 'redux-saga';\nvar TRUE = true;\nvar SagasManager = /*#__PURE__*/function () {\n  function SagasManager() {\n    _classCallCheck(this, SagasManager);\n    var intialBuffers = buffers.expanding(10);\n    this.sagasWithArguments = channel(intialBuffers);\n  }\n\n  /**\n   * Function to add our yielded sagas from individual saga files\n   * @param {array} sagaWithArguments array of yielded watchers\n   *\n   * @memberOf SagasManager\n   */\n  _createClass(SagasManager, [{\n    key: \"addSagaToRoot\",\n    value: function addSagaToRoot() {\n      for (var _len = arguments.length, sagaWithArguments = new Array(_len), _key = 0; _key < _len; _key++) {\n        sagaWithArguments[_key] = arguments[_key];\n      }\n      this.sagasWithArguments.put([].concat(sagaWithArguments));\n    }\n\n    /**\n     * Function to activate root saga.\n     * This function forks all the watchers and registers them in the root.\n     * @returns rootSaga function which is registered in store\n     *\n     * @memberOf SagasManager\n     */\n  }, {\n    key: \"getRootSaga\",\n    value: function getRootSaga() {\n      var sagasChannel = this.sagasWithArguments;\n      return /*#__PURE__*/_regeneratorRuntime().mark(function rootSaga() {\n        var initialSagas, dynamicSaga;\n        return _regeneratorRuntime().wrap(function rootSaga$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return flush(sagasChannel);\n              case 2:\n                initialSagas = _context.sent;\n                _context.next = 5;\n                return all(initialSagas.map(function (initialSagaWithArguments) {\n                  return fork.apply(void 0, _toConsumableArray(initialSagaWithArguments));\n                }));\n              case 5:\n                if (!TRUE) {\n                  _context.next = 13;\n                  break;\n                }\n                _context.next = 8;\n                return take(sagasChannel);\n              case 8:\n                dynamicSaga = _context.sent;\n                _context.next = 11;\n                return fork.apply(void 0, _toConsumableArray(dynamicSaga));\n              case 11:\n                _context.next = 5;\n                break;\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, rootSaga);\n      });\n    }\n  }]);\n  return SagasManager;\n}();\nexport default new SagasManager();","map":{"version":3,"names":["all","flush","fork","take","channel","buffers","TRUE","SagasManager","intialBuffers","expanding","sagasWithArguments","sagaWithArguments","put","sagasChannel","rootSaga","initialSagas","map","initialSagaWithArguments","dynamicSaga"],"sources":["/Volumes/DATA/Yash/Projects/contracting zip/src/utils/sagasManager.js"],"sourcesContent":["/**\n * Sagas file\n * 1.Saga intercepts all the actions before they go to reducer\n * 2.yield method pauses the execution until it is finished\n * 3.yield has several functions\n * i. takeEvery(intercepts the action types i.e listens to that type of action)\n * ii. put(dispatch the action to reducer)\n * iii. call(call some external functions like API calls)\n * iv. select(get the state of any object from the store)\n * 4.Saga methods passes the action object to the saga so we can access the data in action object\n */\n\n/*\n* This is a utility class\n* import this class in our individual sagas and call the function addSagaToRoot and push all our\n* action listeners getRootSagaSaga is called from store file which activates all our listeners\n*/\nimport { all, flush, fork, take } from 'redux-saga/effects';\nimport { channel, buffers } from 'redux-saga';\n\nconst TRUE = true;\n\nclass SagasManager {\n  constructor() {\n    const intialBuffers = buffers.expanding(10);\n    this.sagasWithArguments = channel(intialBuffers);\n  }\n\n  /**\n   * Function to add our yielded sagas from individual saga files\n   * @param {array} sagaWithArguments array of yielded watchers\n   *\n   * @memberOf SagasManager\n   */\n  addSagaToRoot(...sagaWithArguments) {\n    this.sagasWithArguments.put([...sagaWithArguments]);\n  }\n\n  /**\n   * Function to activate root saga.\n   * This function forks all the watchers and registers them in the root.\n   * @returns rootSaga function which is registered in store\n   *\n   * @memberOf SagasManager\n   */\n  getRootSaga() {\n    const sagasChannel = this.sagasWithArguments;\n    return function* rootSaga() {\n      const initialSagas = yield flush(sagasChannel);\n      yield all(\n        initialSagas.map(initialSagaWithArguments =>\n          fork(...initialSagaWithArguments)\n        )\n      );\n\n      while (TRUE) {\n        const dynamicSaga = yield take(sagasChannel);\n        yield fork(...dynamicSaga);\n      }\n    };\n  }\n}\n\nexport default new SagasManager();\n"],"mappings":";;;+CACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,oBAAoB;AAC3D,SAASC,OAAO,EAAEC,OAAO,QAAQ,YAAY;AAE7C,IAAMC,IAAI,GAAG,IAAI;AAAC,IAEZC,YAAY;EAChB,wBAAc;IAAA;IACZ,IAAMC,aAAa,GAAGH,OAAO,CAACI,SAAS,CAAC,EAAE,CAAC;IAC3C,IAAI,CAACC,kBAAkB,GAAGN,OAAO,CAACI,aAAa,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,yBAAoC;MAAA,kCAAnBG,iBAAiB;QAAjBA,iBAAiB;MAAA;MAChC,IAAI,CAACD,kBAAkB,CAACE,GAAG,WAAKD,iBAAiB,EAAE;IACrD;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA;IAAA,OAOA,uBAAc;MACZ,IAAME,YAAY,GAAG,IAAI,CAACH,kBAAkB;MAC5C,+CAAO,SAAUI,QAAQ;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBACF,OAAMb,KAAK,CAACY,YAAY,CAAC;cAAA;gBAAxCE,YAAY;gBAAA;gBAClB,OAAMf,GAAG,CACPe,YAAY,CAACC,GAAG,CAAC,UAAAC,wBAAwB;kBAAA,OACvCf,IAAI,kCAAIe,wBAAwB,EAAC;gBAAA,EAClC,CACF;cAAA;gBAAA,KAEMX,IAAI;kBAAA;kBAAA;gBAAA;gBAAA;gBACW,OAAMH,IAAI,CAACU,YAAY,CAAC;cAAA;gBAAtCK,WAAW;gBAAA;gBACjB,OAAMhB,IAAI,kCAAIgB,WAAW,EAAC;cAAA;gBAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA,GAVbJ,QAAQ;MAAA,CAYxB;IACH;EAAC;EAAA;AAAA;AAGH,eAAe,IAAIP,YAAY,EAAE"},"metadata":{},"sourceType":"module"}