{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $species = GetIntrinsic('%Symbol.species%', true);\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar ArrayCreate = require('./ArrayCreate');\nvar Get = require('./Get');\nvar IsArray = require('./IsArray');\nvar IsConstructor = require('./IsConstructor');\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-arrayspeciescreate\n\nmodule.exports = function ArraySpeciesCreate(originalArray, length) {\n  if (!IsIntegralNumber(length) || length < 0) {\n    throw new $TypeError('Assertion failed: length must be an integer >= 0');\n  }\n  var isArray = IsArray(originalArray);\n  if (!isArray) {\n    return ArrayCreate(length);\n  }\n  var C = Get(originalArray, 'constructor');\n  // TODO: figure out how to make a cross-realm normal Array, a same-realm Array\n  // if (IsConstructor(C)) {\n  // \tif C is another realm's Array, C = undefined\n  // \tObject.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(Array))) === null ?\n  // }\n  if ($species && Type(C) === 'Object') {\n    C = Get(C, $species);\n    if (C === null) {\n      C = void 0;\n    }\n  }\n  if (typeof C === 'undefined') {\n    return ArrayCreate(length);\n  }\n  if (!IsConstructor(C)) {\n    throw new $TypeError('C must be a constructor');\n  }\n  return new C(length); // Construct(C, length);\n};","map":null,"metadata":{},"sourceType":"script"}